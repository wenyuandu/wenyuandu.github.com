<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wenyuan Du</title>
    <description>关于编程，摄影与读书</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 05 Jun 2019 20:13:58 +0800</pubDate>
    <lastBuildDate>Wed, 05 Jun 2019 20:13:58 +0800</lastBuildDate>
    <generator>Jekyll v3.4.2</generator>
    
      <item>
        <title>gRPC实现跨语言的微服务间通信 -- 精通外语的电报员与煲电报粥的小怪兽</title>
        <description>&lt;p&gt;作者：亚瑟、文远&lt;/p&gt;

&lt;h1 id=&quot;1-微服务框架--从系统怪物到服务小怪兽&quot;&gt;1. 微服务框架 – 从系统怪物到服务小怪兽&lt;/h1&gt;
&lt;p&gt;一个小巧的单体应用会随着公司业务的扩张而慢慢成长，逐渐演化成一个庞大且复杂的系统怪物，系统任何一处的问题都将影响整个怪物的表现，很少有单独的开发者能理清系统怪物所有的肌理脉络，导致bug的定位和新功能的扩展都变得越来越困难，对系统的任一改动都要求整个怪物一起回归测试并重新部署，效率必然不高。所以公司发展到了一定阶段，总会需要从架构上寻找解决系统怪物之道，而微服务就是目前最流行的架构方案之一，它将系统怪物拆分成多个独立自治的服务小怪兽，让我们有能力分而治之。
&lt;img src=&quot;/img/grpc_split.jpeg&quot; alt=&quot;插画：牛肉&quot; /&gt;&lt;/p&gt;
&lt;center&gt;插画：牛肉&lt;/center&gt;

&lt;h1 id=&quot;2-rpc框架--小怪兽的电报员&quot;&gt;2. RPC框架 – 小怪兽的电报员&lt;/h1&gt;
&lt;p&gt;一旦系统怪物被拆分成了多个服务小怪兽，小怪兽们如何沟通协作就成了我们最关心的问题。服务小怪兽间的通信就好像发电报一样，涉及到数据序列化、反序列化、连接管理、收发线程、超时处理等多个问题，RPC框架的出现解决了这些问题，就好像通过电报员发电报一样，使用RPC框架让小怪兽们不必关心通信的底层细节。
&lt;img src=&quot;/img/grpc_telegraph.jpeg&quot; alt=&quot;插画：牛肉&quot; /&gt;&lt;/p&gt;
&lt;center&gt;插画：牛肉&lt;/center&gt;

&lt;h4 id=&quot;rpc调用细节&quot;&gt;RPC调用细节&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;服务消费方（小怪兽A）以本地调用方式调用服务&lt;/li&gt;
  &lt;li&gt;client stub（小怪兽A的电报员）接受到调用后负责将方法、参数等编码成能够进行网络传输的消息体（电报）&lt;/li&gt;
  &lt;li&gt;client stub（小怪兽A的电报员）找到服务地址，并将消息发送到服务端&lt;/li&gt;
  &lt;li&gt;server stub（小怪兽B的电报员）收到消息（电报）后进行解码&lt;/li&gt;
  &lt;li&gt;server stub（小怪兽B的电报员）根据解码结果调用本地的服务（小怪兽B）&lt;/li&gt;
  &lt;li&gt;本地服务(小怪兽B)执行并将结果返回给server stub（小怪兽B的电报员）&lt;/li&gt;
  &lt;li&gt;server stub（小怪兽B的电报员）将结果编码成消息（电报）并发送至客户端&lt;/li&gt;
  &lt;li&gt;client stub（小怪兽A的电报员）接受到消息（电报）并进行解码&lt;/li&gt;
  &lt;li&gt;服务消费方（小怪兽A）得到最终的结果&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;3-grpc--这位电报员是语言天才&quot;&gt;3. gRPC – 这位电报员是语言天才&lt;/h1&gt;
&lt;p&gt;如果通信的小怪兽们语言不通，那么我们需要对电报员（亦即RPC框架）的人选提出更高的要求，无论小怪兽们用的是什么语言，协助通信的两位电报员都必须把它们的话翻译成电报员彼此能理解的同一种语言，亦即IDL(Interface Description Language)，是的，电报员在这种情况下还必须承担翻译的角色，而gRPC就是一位如此优秀的电报员。
&lt;img src=&quot;/img/grpc_translate.jpeg&quot; alt=&quot;插画：牛肉&quot; /&gt;&lt;/p&gt;
&lt;center&gt;插画：牛肉&lt;/center&gt;

&lt;h3 id=&quot;4-grpc-demo&quot;&gt;4. gRPC Demo&lt;/h3&gt;
&lt;p&gt;实现Node客户端小怪兽发送”今晚的月色真美”，Java服务端小怪兽收到电报内容，并回复”I love you too”。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;通过Spring Boot创建Java项目，pom.xml中加入如下依赖&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.grpc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;grpc-netty-shaded&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.21.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.grpc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;grpc-protobuf&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.21.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.grpc&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;grpc-stub&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.21.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;kr.motd.maven&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;os-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.0.Final&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.xolstice.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;protobuf-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.5.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;nt&quot;&gt;&amp;lt;protocArtifact&amp;gt;&lt;/span&gt;com.google.protobuf:protoc:3.7.1:exe:${os.detected.classifier}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/protocArtifact&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;nt&quot;&gt;&amp;lt;pluginId&amp;gt;&lt;/span&gt;grpc-java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pluginId&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;nt&quot;&gt;&amp;lt;pluginArtifact&amp;gt;&lt;/span&gt;io.grpc:protoc-gen-grpc-java:1.21.0:exe:${os.detected.classifier}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pluginArtifact&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;c&quot;&gt;&amp;lt;!--指定生成文件目录--&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;nt&quot;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;src/main/java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;c&quot;&gt;&amp;lt;!--重新生成文件时不清除 原有src/main/java下的内容--&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;nt&quot;&gt;&amp;lt;clearOutputDirectory&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/clearOutputDirectory&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                     &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                         &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                         &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;compile-custom&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;  	
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;定义IDL文件&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;proto3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java_multiple_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java_package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;net.changjinglu.proto&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java_outer_classname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TelegraphProto&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telegraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;// The greeting service definition.&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TelegraphService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Sends a greeting&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;rpc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SayLove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoveRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoveReply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;// The request message containing the user's name.&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoveRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;// The response message containing the greetings&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoveReply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译生成IDL定义的Java服务接口，相关代码会生成到配置对应的路径下&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mvn clean install
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;/img/grpc_generated_code.png&quot; alt=&quot;clipboard.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现IDL定义的Java服务接口&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TelegraphGreeterImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TelegraphServiceGrpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TelegraphServiceImplBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayLove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoveRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoveReply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;收到Node小怪兽的消息:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;responseObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoveReply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I Love U Too&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//结束&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;responseObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编写并启动Java服务端&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GrpcServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;cm&quot;&gt;/** GRPC 服务端 */&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;GrpcServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grpcService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GrpcServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;grpcService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GRPC 服务端启动成功&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//GRPC 服务端需要手动阻塞线程&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;grpcService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;waitTermination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;c1&quot;&gt;//绑定接口、启动服务&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8899&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TelegraphGreeterImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;server start!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//这里是为了防止jvm关闭了，但是tcp还没有关闭的情况&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addShutdownHook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()-&amp;gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;关闭jvm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;GrpcServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitTermination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;awaitTermination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;/img/grpc_server_start.png&quot; alt=&quot;clipboard.png&quot; /&gt;
  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编写并启动Nodejs客户端，客户端使用相同的IDL&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROTO_FILE_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/wenyuan/Nodejs/grpc/proto/telegraph.proto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grpc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'grpc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grpcService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PROTO_FILE_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;telegraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


 &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grpcService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TelegraphService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost:8899'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createInsecure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

     &lt;span class=&quot;nx&quot;&gt;stub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayLove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'今晚的月色真美'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'收到Java小怪兽的消息: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java服务端收到消息并回复 
 &lt;img src=&quot;/img/grpc_server_side.png&quot; alt=&quot;clipboard.png&quot; /&gt;
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nodejs客户端收到Java服务端的回复         &lt;br /&gt;
 &lt;img src=&quot;/img/grpc_client_side.png&quot; alt=&quot;clipboard.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 29 May 2019 16:14:28 +0800</pubDate>
        <link>http://localhost:4000/%E6%9E%B6%E6%9E%84/2019/05/29/gRPC%E5%AE%9E%E7%8E%B0%E8%B7%A8%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%B4%E9%80%9A%E4%BF%A1-%E7%B2%BE%E9%80%9A%E5%A4%96%E8%AF%AD%E7%9A%84%E7%94%B5%E6%8A%A5%E5%91%98%E4%B8%8E%E7%85%B2%E7%94%B5%E6%8A%A5%E7%B2%A5%E7%9A%84%E5%B0%8F%E6%80%AA%E5%85%BD/</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%9E%B6%E6%9E%84/2019/05/29/gRPC%E5%AE%9E%E7%8E%B0%E8%B7%A8%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%B4%E9%80%9A%E4%BF%A1-%E7%B2%BE%E9%80%9A%E5%A4%96%E8%AF%AD%E7%9A%84%E7%94%B5%E6%8A%A5%E5%91%98%E4%B8%8E%E7%85%B2%E7%94%B5%E6%8A%A5%E7%B2%A5%E7%9A%84%E5%B0%8F%E6%80%AA%E5%85%BD/</guid>
        
        <category>gRPC</category>
        
        <category>Java</category>
        
        <category>Nodejs</category>
        
        <category>微服务</category>
        
        
        <category>架构</category>
        
      </item>
    
      <item>
        <title>通过Dnsmasq部署本地DNS服务</title>
        <description>&lt;p&gt;在开发、测试和正式环境中，我们总希望通过同一个域名找到对应环境中的服务实例，简化配置流程，例如在测试环境中，让api.changjinglu.net关联到IP为192.168.1.34的测试服务器，而在正式环境中，让api.changjinglu.net关联到IP为47.96.51.143的正式服务器。&lt;/p&gt;

&lt;p&gt;我们现在的解决方案是在本机的/etc/hosts文件中记录相应的域名IP映射关系，本机在尝试解析一个域名时，会先去/etc/hosts中查找该域名对应的IP，并访问相应IP的服务器。只有当/etc/hosts中没有该域名的记录时，本机才会去DNS服务器进行域名解析。&lt;/p&gt;

&lt;p&gt;本机解析域名的优先级为DNS缓存&amp;gt;/etc/hosts&amp;gt;DNS服务。&lt;/p&gt;

&lt;p&gt;这个解决方案稍显繁琐，因为每台机器都必须在自己的/etc/hosts文件中配置正确的域名IP映射关系，一旦映射关系发生改变，所有机器又必须全部做相应的修改。一个更简洁的解决方案是构建一个本地DNS服务器，让路由器指向该本地DNS服务器，让它统一管理所有通用的域名IP映射，如果个别开发者有自己的特别需要，可以利用域名解析的优先级顺序，通过修改自己本机的/etc/hosts覆盖本地DNS服务的映射关系。使用这个新方案，当局域网中新增某个服务或某个原有服务改变IP地址时，只需要在本地DNS服务器上新增或修改映射配置，局域网中的所有机器无需做修改，就能享受到正确的映射关系了。&lt;/p&gt;

&lt;p&gt;下面讲一讲如何通过Dnsmasq实现这个新方案。&lt;/p&gt;

&lt;h6 id=&quot;1-安装dnsmasq&quot;&gt;1. 安装Dnsmasq&lt;/h6&gt;
&lt;p&gt;我将本地DNS服务安装在了192.168.1.98上，因为该测试服务器的系统是ubuntu，使用自带的包管理器下载并安装Dnsmasq最简洁。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    sudo apt-get install dnsmasq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;2-配置dnsmasq&quot;&gt;2. 配置Dnsmasq&lt;/h6&gt;
&lt;p&gt;Dnsmasq所有的配置都在/etc/dnsmasq.conf文件中完成，按照需要简单做了以下修改。&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    #首先配置resolv-file，这个参数表示dnsmasq会从这个指定的文件中寻找上游DNS服务器

    resolv-file=/etc/resolv.dnsmasq.conf

    #单设置127.0.0.1为只能本机使用，单设置本机IP为只能内部全网使用而本机不能用，这里需要同时设置两者

    listen-address=127.0.0.1,192.168.1.98

    #dnsmasq缓存设置
    
    cache-size=1024
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后根据自己设置的resolv-file=/etc/resolv.dnsmasq.conf，配置/etc/resolv.dnsmasq.conf文件，指定上游DNS服务器&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    nameserver 114.114.114.114
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;3-坑&quot;&gt;3. 坑&lt;/h6&gt;
&lt;p&gt;按以上配置配置好Dnsmasq并启动后，会发现Dnsmasq无法正常解析域名，使用ps -ef | grep dnsmasq查看后发现如下信息&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    dnsmasq  10384     1  0 15:16 ?        00:00:00 /usr/sbin/dnsmasq -x /var/run/dnsmasq/dnsmasq.pid -u dnsmasq -r /var/run/dnsmasq/resolv.conf -7 /etc/

    dnsmasq.d,.dpkg-dist,.dpkg-old,.dpkg-new --local-service --trust-anchor=.,19036,8,2,49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32F24E8FB5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;其中dnsmasq -r /var/run/dnsmasq/resolv.conf说明Dnsmasq是从/var/run/dnsmasq/resolv.conf文件中获取上游DNS服务器，而非我们指定的resolv-file=/etc/resolv.dnsmasq.conf。
查阅了无数文档以后，发现在/etc/default/dnsmasq中有一个IGNORE_RESOLVCONF属性，说明如下&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # If the resolvconf package is installed, dnsmasq will use its output

    # rather than the contents of /etc/resolv.conf to find upstream

    # nameservers. Uncommenting this line inhibits this behaviour.

    # Note that including a &quot;resolv-file=&amp;lt;filename&amp;gt;&quot; line in

    # /etc/dnsmasq.conf is not enough to override resolvconf if it is

    # installed: the line below must be uncommented.

    # IGNORE_RESOLVCONF=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里必须取消IGNORE_RESOLVCONF=yes前的注释，才能让resolv-file=/etc/resolv.dnsmasq.conf生效。&lt;/p&gt;

&lt;h6 id=&quot;4-启动dnsmasq&quot;&gt;4. 启动Dnsmasq&lt;/h6&gt;
&lt;p&gt;大功告成，启动Dnsmasq。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    sudo service dnsmasq start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;5-设置路由器将dns服务指向本地dns服务器&quot;&gt;5. 设置路由器，将DNS服务指向本地DNS服务器&lt;/h6&gt;
</description>
        <pubDate>Fri, 27 Apr 2018 18:18:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/27/%E9%80%9A%E8%BF%87Dnsmasq%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0DNS%E6%9C%8D%E5%8A%A1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/27/%E9%80%9A%E8%BF%87Dnsmasq%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0DNS%E6%9C%8D%E5%8A%A1/</guid>
        
        <category>DNS</category>
        
        
      </item>
    
      <item>
        <title>如何通过Spring Profile进行多环境配置</title>
        <description>&lt;p&gt;在系统开发，测试，到最终上线发布的过程中，切换环境是一个很常见的需求，不同环境中的参数（例如数据库配置、日志系统的级别）并不相同，如果每次切环境都要手动修改配置，实在称不上高效优雅，这就使得如何低成本地切换环境成为了一个非常实际的问题。&lt;/p&gt;

&lt;p&gt;我在上一篇文章&lt;a href=&quot;https://wenyuandu.github.io/2017/05/14/如何通过Maven-Profile进行多环境配置/&quot;&gt;如何通过Maven Profile进行多环境配置&lt;/a&gt;中，介绍了一种低成本切换环境的解决方案，但是每次切换环境都必须通过Maven重新构建，不但稍嫌麻烦而且有引入bug的可能，所以这次我会介绍另一种更加灵活的解决方案，即Spring Profile。&lt;/p&gt;

&lt;p&gt;其实Spring Profile与Maven Profile在解决多环境配置的思路上并没有太大区别，同样是在资源文件中事先设置好不同环境中用到的参数，然后根据环境选择使用哪一个资源文件。唯一的区别是Spring不会在构建的时候选择资源文件，而是在运行的时候选择，所以打出的war包能够直接用于不同的运行环境，而不需要重新构建。下面我依旧举一个简单的例子方便大家理解。&lt;/p&gt;

&lt;h6 id=&quot;1-资源文件&quot;&gt;1. 资源文件&lt;/h6&gt;
&lt;p&gt;在资源文件中设置好不同环境所需的参数
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3478473-bdd88be9e87042f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;资源文件列表&quot; /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3478473-f2adfc8d51e5a4fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;开发环境参数&quot; /&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3478473-8930d0fc77813954.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;生产环境参数&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;2-配置spring-profile&quot;&gt;2. 配置Spring Profile&lt;/h6&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--开发环境--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;profile=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;development&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;util:properties&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;config&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:properties/development/properties&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--生产环境--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;profile=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;util:properties&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;config&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:properties/production/properties&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--其他Bean--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demoBean&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.demo.DemoBean&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Spring会根据Profile的激活状态创建相应的Bean，而Profile的激活状态取决于两个属性，即spring.profiles.active和spring.profiles.default。
如果设置了spring.profiles.active属性，Spring就会根据它判断哪些Profile处于激活状态，如果没有设置spring.profiles.active，Spring则会退而求其次根据spring.profiles.default判断Profile的激活状态。&lt;/p&gt;

&lt;h6 id=&quot;3-bean赋值&quot;&gt;3. Bean赋值&lt;/h6&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{config.name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;4-激活profile&quot;&gt;4. 激活Profile&lt;/h6&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;classpath:applicationContext&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;development&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoBeanService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DemoBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Current environment: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demoBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;5结果&quot;&gt;5.结果&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3478473-8ad1ae09a54cb465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####常用的Profile激活方式
Spring提供了多种激活Profile的方式，大家可以灵活使用以下任意一种方式激活Profile：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;作为DispatcherServlet的初始化参数&lt;/li&gt;
  &lt;li&gt;作为Web应用的上下文参数&lt;/li&gt;
  &lt;li&gt;作为JNDI条目&lt;/li&gt;
  &lt;li&gt;作为环境变量&lt;/li&gt;
  &lt;li&gt;作为JVM的系统属性&lt;/li&gt;
  &lt;li&gt;在集成测试类上，使用@ActiveProfiles注解设置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然在实际工作中比较常用的激活方式还是使用环境变量或JVM的系统属性，接下来我们以JVM属性为例，去掉代码中的@ActiveProfiles(“development”)，并尝试在IDEA的JVM参数设置中激活production Profile：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;classpath:applicationContext&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//@ActiveProfiles(&quot;development&quot;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoBeanService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DemoBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demoBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Current environment: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demoBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3478473-13ef6680fffe46db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;
结果和预期的一样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3478473-7102e3f9ddf5aea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 16 May 2017 03:12:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/15/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87Spring-Profile%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/15/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87Spring-Profile%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
        
        <category>spring</category>
        
        
      </item>
    
      <item>
        <title>如何通过Maven Profile进行多环境配置</title>
        <description>&lt;p&gt;在系统开发，测试，到最终上线发布的过程中，切换环境是一个很常见的需求，不同环境中的参数（例如数据库配置、日志系统的级别）并不相同，如果每次切环境都要手动修改配置，实在称不上高效优雅，这就使得如何低成本地切换环境成为了一个非常实际的问题。&lt;/p&gt;

&lt;p&gt;一个解决思路是首先在资源文件中设置好不同环境中用到的参数，然后在构建阶段确定要将哪一个资源文件编译到应用包中。根据这个思路我们可以通过Maven Profile来完成多环境配置，下文举一个配置jdbc的简单例子方便大家理解。&lt;/p&gt;
&lt;h6 id=&quot;1-资源文件&quot;&gt;1. 资源文件&lt;/h6&gt;
&lt;p&gt;在资源文件中设置好jdbc连接的地址、密码等基本参数
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3478473-56ea3acba2efab7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;2-在pomxml中配置profile&quot;&gt;2. 在pom.xml中配置profile&lt;/h6&gt;
&lt;pre&gt;&lt;code class=&quot;language-maven&quot;&gt;&amp;lt;profiles&amp;gt;
    &amp;lt;!--开发环境--&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;development&amp;lt;/id&amp;gt;
        &amp;lt;properties&amp;gt;
            &amp;lt;environment&amp;gt;development&amp;lt;/environment&amp;gt;
        &amp;lt;/properties&amp;gt;
        &amp;lt;!--默认选择这个配置--&amp;gt;
        &amp;lt;activation&amp;gt;
            &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
        &amp;lt;/activation&amp;gt;
    &amp;lt;/profile&amp;gt;
    &amp;lt;!--生产环境--&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;production&amp;lt;/id&amp;gt;
        &amp;lt;properties&amp;gt;
            &amp;lt;environment&amp;gt;production&amp;lt;/environment&amp;gt;
        &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
&amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&quot;3-配置资源文件&quot;&gt;3. 配置资源文件&lt;/h6&gt;
&lt;pre&gt;&lt;code class=&quot;language-maven&quot;&gt;&amp;lt;build&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;
            &amp;lt;excludes&amp;gt;
                &amp;lt;exclude&amp;gt;properties/*&amp;lt;/exclude&amp;gt;
            &amp;lt;/excludes&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;  
            &amp;lt;directory&amp;gt;src/main/resources/properties/${environment}&amp;lt;/directory&amp;gt;  
        &amp;lt;/resource&amp;gt;  
    &amp;lt;/resources&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&quot;4maven构建&quot;&gt;4.Maven构建&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean package -P development
mvn clean package -P production
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;分别构建出开发环境或生产环境的war包，若不设置-P参数，按照我们上文中pom.xml的配置，会默认选择开发环境的profile。&lt;/p&gt;

&lt;h4 id=&quot;缺点&quot;&gt;缺点&lt;/h4&gt;
&lt;p&gt;通过Maven Profile实现多环境配置的一个缺点是每次切换环境都必须重新构建，而重新构建可能会引入bug，我准备在下一篇文章中介绍另一种更加灵活的多环境配置解决方案，即Spring Profile。&lt;/p&gt;
</description>
        <pubDate>Sun, 14 May 2017 23:51:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/14/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87Maven-Profile%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/14/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87Maven-Profile%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
        
        <category>spring</category>
        
        
      </item>
    
      <item>
        <title>取名小记</title>
        <description>&lt;p&gt;为女儿取名翻烂了不下十本书，颇有点心得，权且记下做日后笑谈。&lt;/p&gt;

&lt;p&gt;首先取名必为纪念或者期望，最忌讳按三才五行生搬硬凑两个字，除了好听外毫无内涵可言，从此宝宝沦为行立着的绣花枕头稻草包。既是纪念或者期望，低了固然俗不可耐，高了又恐隐晦艰涩，最看取名人的格韵品性。品性无法强求，格韵上倒还可以努力。&lt;/p&gt;

&lt;p&gt;最巧的办法自然是化古人境界为自己境界，所谓女诗经男楚辞便是一例，只不过诗经楚辞通读全篇的人已少，脍炙人口的几句又早已被人取滥，照此取名恐怕难免落入晦涩和俗套之中，倒不妨开阔眼界，古诗、绝句、律诗、乐府、词曲、乃至现代小说歌词都可以化为己用。这里关键在一个化字，贵有自己的巧思，否则就算起一样的名也不出彩，林风眠意境高绝，史风眠就未必，史可法令左公瞿然注视，朱可法又未必。&lt;/p&gt;

&lt;p&gt;韵律上不必特别忌讳双声叠韵，纳兰容若岂非双声？王阳明岂非叠韵？简直好听得要命！以双声叠韵为病本就是过时的理论，也不必特别纠结于三才五行，若取名必论三才五行，外国人还活不活了？&lt;/p&gt;

&lt;p&gt;我拟的几个名字：&lt;/p&gt;

&lt;p&gt;杜雨浓，小名夭夭。雨本无所谓浓淡，所谓雨浓，若不是在画中则是有香来，如果能看出后一层意思，知道是借着李太白的“犬吠深巷中，桃花带雨浓”一句指代桃花，自然明白是期望她宜其室家。如果看不出后一层意思，只知道下雨，那也合了“如在目前”的境界，每次雨天都能想到她，岂不温柔？&lt;/p&gt;

&lt;p&gt;杜微萌。防微杜渐，防萌杜渐之意，微萌。&lt;/p&gt;

&lt;p&gt;杜宴安。宴安鸩毒，不可怀也，必须杜绝。但既然能宴安而不宴安，也必无生计之忧。&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Oct 2016 04:31:00 +0800</pubDate>
        <link>http://localhost:4000/2016/10/30/naming/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/30/naming/</guid>
        
        <category>name</category>
        
        
      </item>
    
      <item>
        <title>SSH加密原理与RSA非对称加密算法</title>
        <description>&lt;p&gt;首先声明一下，这里所说的SSH，并不是Java传统的三大框架，而是一种建立在应用层和传输层基础上的安全外壳协议，熟悉Linux的朋友经常使用到一 个SSH Secure Shell Cilent的工具，本文也是基于此工具加密原理的学习，在SSH的加密原理中，使用到了RSA非对称加密算法，本文也一并做了学习和了解。&lt;/p&gt;

&lt;h1 id=&quot;非对称加密算法&quot;&gt;非对称加密算法：&lt;/h1&gt;

&lt;p&gt;在日常的工作生产中， 我们经常需要进行数据的通讯，开发人员经常需要对数据进行加解密操作，以保证数据的安全。数据的加密算法非为对称加密和非对称加密两种，常用的DES、三 重DES、AES等都属于对称加密，即通过一个密钥可以进行数据的加解密，密钥一旦泄漏，传输的数据则不安全。&lt;/p&gt;

&lt;p&gt;非对称加密算法的核心源于数学问题，它存在公钥和私钥的概念，要完成加解密操作，需要两个密钥同时参与。我们常说的“公钥加密，私钥加密”或“私钥加密， 公钥解密”都属于非对称加密的范畴，后文中讲到的RSA算法也一种典型的非对称加密算法。公钥加密的数据必须使用私钥才可以解密，同样，私钥加密的数据也 只能通过公钥进行解密。&lt;/p&gt;

&lt;p&gt;相比对称加密，非对称加密的安全性得到了提升，但是也存在明显的缺点，非对称加解密的效率要远远小于对称加解密。所以非对称加密往往被用在一些安全性要求比较高的应用或领域中。&lt;/p&gt;

&lt;h1 id=&quot;典型的rsa非对称加密&quot;&gt;典型的RSA非对称加密：&lt;/h1&gt;

&lt;p&gt;RSA加密算法是一种典型的非对称加密算法，它基于大数的因式分解数学难题，它也是应用最广泛的非对称加密算法，于1978年由美国麻省理工学院（MIT）的三位学着：Ron Rivest、Adi Shamir 和 Leonard Adleman 共同提出。&lt;/p&gt;

&lt;p&gt;它的原理较为简单，我们假设有消息发送方A和消息接收方B，通过下面的几个步骤，我们就可以完成消息的加密传递：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;消息发送方A在本地构建密钥对，公钥和私钥；&lt;/li&gt;
  &lt;li&gt;消息发送方A将产生的公钥发送给消息接收方B；&lt;/li&gt;
  &lt;li&gt;B向A发送数据时，通过公钥进行加密，A接收到数据后通过私钥进行解密，完成一次通信；&lt;/li&gt;
  &lt;li&gt;反之，A向B发送数据时，通过私钥对数据进行加密，B接收到数据后通过公钥进行解密。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于公钥是消息发送方A暴露给消息接收方B的，所以这种方式也存在一定的安全隐患，如果公钥在数据传输过程中泄漏，则A通过私钥加密的数据就可能被解密。&lt;/p&gt;

&lt;p&gt;如果要建立更安全的加密消息传递模型，需要消息发送方和消息接收方各构建一套密钥对，并分别将各自的公钥暴露给对方，在进行消息传递时，A通过B的公钥对数据加密，B接收到消息通过B的私钥进行解密，反之，B通过A的公钥进行加密，A接收到消息后通过A的私钥进行解密。&lt;/p&gt;

&lt;p&gt;当然，这种方式可能存在数据传递被模拟的隐患，我们可以通过数字签名等技术进行安全性的进一步提升。由于存在多次的非对称加解密，这种方式带来的效率问题也更加严重。&lt;/p&gt;

&lt;h1 id=&quot;ssh加密原理&quot;&gt;SSH加密原理：&lt;/h1&gt;

&lt;p&gt;在SSH安全协议的原理中， 是一种非对称加密与对称加密算法的结合，先看下图：
&lt;img src=&quot;/img/ssh.png&quot; alt=&quot;ssh.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里进行一下说明：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;首先服务端会通过非对称加密，产生一个公钥和私钥；&lt;/li&gt;
  &lt;li&gt;在客户端发起请求时，服务端将公钥暴露给客户端，这个公钥可以被任意暴露；&lt;/li&gt;
  &lt;li&gt;客户端在获取公钥后，会先产生一个由256位随机数字组成的会话密钥，这里称为口令；&lt;/li&gt;
  &lt;li&gt;客户端通过公钥将这个口令加密，发送给服务器端；&lt;/li&gt;
  &lt;li&gt;服务器端通过私钥进行解密，获取到通讯口令；&lt;/li&gt;
  &lt;li&gt;之后，客户端和服务端的信息传递，都通过这个口令进行对称的加密。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;个人感觉，这样的设计在一定程度上提高了加解密的效率，不过，与客户端服务端各构建一套密钥对的加解密方式相比，在安全性上可能有所下降。在上面所述的通过口令进行加密的过程中，数据也是可以被窃听的，不过由于密钥是256个随机数字，有10的256次方中组合方式，所以破解难度也很大。相对还是比较安全的。服务端和客户端都提前知道了密钥，SSH的这种方式，服务端是通过解密获取到了密钥。&lt;/p&gt;

&lt;h1 id=&quot;dh密钥交换算法&quot;&gt;DH密钥交换算法&lt;/h1&gt;

&lt;p&gt;SSH的原理，是基于RSA非对称加密，RSA是基于大数的因式分解数学难题，下面要提到的DH密钥交换算法则是基于有限域上的离散对数难题。&lt;/p&gt;

&lt;p&gt;DH算法是一种密钥协商算法，只用于密钥的分配，不用于消息的加解密。它提供了一种安全的交换密钥的方式，通过交换的密钥进行数据的加解密。就像SSH原理中，口令的交换，不过DH算法更安全。&lt;/p&gt;

&lt;p&gt;我们举个例子来进行说明，假设有A、B两方，A作为发送者，B作为接收者。通过下面的几个步骤就可以构建出一个只属于双方的密钥口令，如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先A、B双方，在通信前构建专属于自己的密钥对，假设分别是公钥A，私钥A，公钥B，私钥B；&lt;/li&gt;
  &lt;li&gt;A将自己的公钥A暴露给B，B通过私钥B和公钥A经过一定的运算产生出本地的密钥B；&lt;/li&gt;
  &lt;li&gt;同样，B将自己的公钥B暴露给A，A通过私钥A和公钥B经过一定的运算产生出本地的密钥A；&lt;/li&gt;
  &lt;li&gt;最后，这个算法有意思的一点就是，密钥A和密钥B是一致的，这样A、B双方就拥有了一个属于双方的“秘密”口令；&lt;/li&gt;
  &lt;li&gt;DH算法的产生是，对称加密向非对称加密的过度，为后续非对称加密的产生和发展奠定了基础。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总结：成文的过程中，阅读了一些关于加密解密的算法，做出了如上的理解，毕竟术业有专攻，也可能存在理解偏颇，甚至错误的地方，希望大家批评指正。&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Sep 2016 22:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/09/29/ssh-rsa-encryption/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/29/ssh-rsa-encryption/</guid>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>How to Read a Book</title>
        <description>&lt;h2 id=&quot;阅读目的的三个层次&quot;&gt;阅读目的的三个层次：&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;娱乐消遣&lt;/li&gt;
  &lt;li&gt;获得资讯&lt;/li&gt;
  &lt;li&gt;增进理解&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;阅读时应心存的四个问题&quot;&gt;阅读时应心存的四个问题：&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;整体来说，这本书到底在谈什么？&lt;/li&gt;
  &lt;li&gt;书的细节部分，即作者的想法或论点是什么？&lt;/li&gt;
  &lt;li&gt;这本书说的有道理吗，是全部有还只是部分有道理？&lt;/li&gt;
  &lt;li&gt;这本书和我有什么关系？&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;阅读的四个渐进层次&quot;&gt;阅读的四个渐进层次：&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;基础阅读（elementary reading）：熟练识字阶段&lt;/li&gt;
  &lt;li&gt;检视阅读（inspectional reading）：系统化的略读（skimming systematically），强调在规定时间内明确一本书所属的类别与基本架构&lt;/li&gt;
  &lt;li&gt;分析阅读（analytical reading）：全盘、完整地阅读&lt;/li&gt;
  &lt;li&gt;主题阅读（synoptical reading）：就某一主题阅读与之相关的许多本书&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;检视阅读&quot;&gt;检视阅读&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;先看书名页，然后如果有序就先看序。&lt;/li&gt;
  &lt;li&gt;研究目录页，对这本书的基本架构做概括性的理解。&lt;/li&gt;
  &lt;li&gt;如果书中附有索引，也要检阅一下。&lt;/li&gt;
  &lt;li&gt;如果那是本包着书衣的新书，不妨读一下出版者的介绍。&lt;/li&gt;
  &lt;li&gt;从你对目录很概略甚至有点模糊的印象当中，开始挑几个看来跟主题息息相关的篇章来看。&lt;/li&gt;
  &lt;li&gt;最后一步，把书打开来，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多。 你可以把自己当成一个侦探，在找寻一本书或思想主题的线索。随时保持敏捷，就很容易让一切状况清楚。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;分析阅读&quot;&gt;分析阅读&lt;/h2&gt;
&lt;h3 id=&quot;第一个阶段找出一本书在谈些什么&quot;&gt;第一个阶段：找出一本书在谈些什么&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;你一定要知道自己在读的是哪一类书，而且要越早知道越好。最好早在你开始阅读之前就先知道。&lt;/li&gt;
  &lt;li&gt;使用一个单一的句子，或最多几句话（一小段文字）来叙述整本书的内容。&lt;/li&gt;
  &lt;li&gt;将书中重要篇章列举出来，说明它们如何按照顺序组成一个整体的架构。&lt;/li&gt;
  &lt;li&gt;找出作者在问的问题，或作者想要解决的问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;第二个阶段诠释一本书的内容&quot;&gt;第二个阶段：诠释一本书的内容&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;找出重要单字，透过它们与作者达成共识。&lt;/li&gt;
  &lt;li&gt;将一本书中最重要的句子圈出来，找出其中的主旨 。&lt;/li&gt;
  &lt;li&gt;从相关文句的关联中，设法架构出一本书的基本论述。&lt;/li&gt;
  &lt;li&gt;找出作者的解答。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;第三个阶段像是沟通知识一样地评论一本书&quot;&gt;第三个阶段：像是沟通知识一样地评论一本书&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;在你说出“我同意”，“我不同意”，或“我暂缓评论”之前，你一定要能肯定地说：“我了解了。”&lt;/li&gt;
  &lt;li&gt;当你不同意作者的观点时，要理性地表达自己的意见，不要无理地辩驳或争论。&lt;/li&gt;
  &lt;li&gt;尊重知识与个人观点的不同，在作任何评断之前，都要找出理论基础。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;主题阅读&quot;&gt;主题阅读&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;利用主题工具书，收集相关书目。&lt;/li&gt;
  &lt;li&gt;检视阅读这些书目，确定哪些书与你的主题相关，在这个过程中你会更清楚你的主题。&lt;/li&gt;
  &lt;li&gt;第二次通过检视阅读找出与主题相关的书，以及书中的章。&lt;/li&gt;
  &lt;li&gt;用中立的语言，带领各个作者与你达成共识。&lt;/li&gt;
  &lt;li&gt;理清问题，并让各个作者为你回答。&lt;/li&gt;
  &lt;li&gt;界定主题，确保各个作者相关的观点都参与进来。&lt;/li&gt;
  &lt;li&gt;分析讨论，把问题和议题依序排列，以求突出主题。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;批评一部作品的四个角度&quot;&gt;批评一部作品的四个角度：&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;知识不足（uninformed）&lt;/li&gt;
  &lt;li&gt;知识有错误（misinformed）&lt;/li&gt;
  &lt;li&gt;不合逻辑&lt;/li&gt;
  &lt;li&gt;分析不够完整&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;做笔记的六个建议&quot;&gt;做笔记的六个建议：&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;画底线—在主要的重点，或重要又有力量的句子下画线。&lt;/li&gt;
  &lt;li&gt;在画底线处的栏外再加画一道线—把你已经画线的部分再强调一遍，或是某一段很重要，但要画底线太长了，便在这一整段外加上一个记号。&lt;/li&gt;
  &lt;li&gt;在空白处做星号或其他符号—要慎用，只用来强调书中十来个最重要的声明或段落即可。你可能想要将做过这样记号的地方每页折一个角，或是夹一张书签，这样你随时从书架上拿起这本书，打开你做记号的地方，就能唤醒你的记忆。&lt;/li&gt;
  &lt;li&gt;在空白处编号—作者的某个论点发展出一连串的重要陈述时，可以做顺序编号。&lt;/li&gt;
  &lt;li&gt;在空白处记下其他的页码—强调作者在书中其他部分也有过同样的论点，或相关的要点，或是与此处观点不同的地方。这样做能让散布全书的想法统一集中起来。许多读者会用Cf这样的记号，表示比较或参照的意思。&lt;/li&gt;
  &lt;li&gt;将关键字或句子圈出来—这跟画底线是同样的功能。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 25 Jan 2016 22:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/01/25/how-to-read-a-book/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/25/how-to-read-a-book/</guid>
        
        <category>book</category>
        
        
      </item>
    
  </channel>
</rss>
